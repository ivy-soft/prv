namespace TheGarage.Services.AutomaticPayment.Factories
{
    using System;
    using TheGarage.Data.Models;
    using TheGarage.Services.AutomaticPayment.Factories.Contracts;
    using TheGarage.Services.AutomaticPayment.Providers;

    public class ModelsFactory : IModelsFactory
    {
        private const string ConstantsStatusUnpaid = "Unpaid";
        private const string ConstantsReccuring = "Recurring";
        private const string ConstantsDetailsNote = "Autogenerated invoice for regular autocharge payment";
        private const string ConstantsCreatedBy = "System";
        private const string ConstantsType = "Monthly";

        //// To do invoice details type and refatoring to abstract factory
        //public InvoiceDetail CreateMonthlyInvoiceDetails(string cardNumber, string chargeCodeName, decimal amount, decimal garageTax, int paidDays, decimal dailyRate, DateTime startDate, DateTime endDate, string garageName, Guid invoiceId)
        //{
        //    var invoiceDetails = new InvoiceDetail();
        //    invoiceDetails.TAX = garageTax;
        //    invoiceDetails.ChargeCode = chargeCodeName;
        //    invoiceDetails.Amount = amount;
        //    invoiceDetails.Cards = cardNumber;
        //    invoiceDetails.InvoiceId = invoiceId;
        //    invoiceDetails.StartDatePaid = startDate;
        //    invoiceDetails.EndDatePaid = endDate;
        //    invoiceDetails.GarageName = garageName;
        //    invoiceDetails.PaidDays = paidDays;
        //    invoiceDetails.DailyRate = dailyRate;
        //    return invoiceDetails;
        //}

        public Invoice CreateMonthlyInvoiceBySystem(Guid garageId, string garageName, string userId, string subscriber, string number, decimal amount)
        {
            var invoice = new Invoice();
            invoice.Number = number;
            invoice.Details = ConstantsDetailsNote;
            invoice.Type = ConstantsType;
            invoice.IsPaid = false;
            invoice.Amount = amount;
            invoice.AmountLeft = amount;
            invoice.Owner = garageName;
            invoice.Subscriber = subscriber;
            invoice.GarageId = garageId;
            invoice.IsPaidAndMonthly = false;
            invoice.UserId = userId;
            invoice.Status = ConstantsStatusUnpaid;
            invoice.IsAdditionalFee = false;
            invoice.Recurring = ConstantsReccuring;
            invoice.StartDate = new DateTime(DateTimeProvider.Current.Now.Year, DateTimeProvider.Current.Now.Month, 1).AddMonths(1);
            invoice.EndDate = new DateTime(DateTimeProvider.Current.Now.Year, DateTimeProvider.Current.Now.Month, 1, 0, 0, 0).AddMonths(2).AddDays(-1);
            invoice.CreatedBy = ConstantsCreatedBy;

            return invoice;
        }
    }
}
